# Makefile cho 4 phi√™n b·∫£n Gaussian Elimination
CC = gcc
CFLAGS = -Wall -O2 -lm

# Th∆∞ m·ª•c output
BUILD_DIR = build

# OpenMP: macOS c·∫ßn homebrew gcc v√† libomp
# Ubuntu/Linux d√πng gcc system
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    # macOS: s·ª≠ d·ª•ng homebrew gcc v√† libomp
    OPENMP_CC := $(shell which gcc-15 2>/dev/null || which gcc-14 2>/dev/null || which gcc-13 2>/dev/null || echo "clang")
    LIBOMP_PREFIX := $(shell brew --prefix libomp 2>/dev/null || echo "/opt/homebrew/opt/libomp")
    ifeq ($(OPENMP_CC),clang)
        # Fallback: clang v·ªõi libomp t·ª´ homebrew
        OPENMP_FLAGS = -Xpreprocessor -fopenmp -I$(LIBOMP_PREFIX)/include -L$(LIBOMP_PREFIX)/lib -lomp
    else
        # S·ª≠ d·ª•ng homebrew gcc
        OPENMP_FLAGS = -fopenmp -I$(LIBOMP_PREFIX)/include -L$(LIBOMP_PREFIX)/lib
    endif
else
    # Linux: d√πng gcc system
    OPENMP_CC = gcc
    OPENMP_FLAGS = -fopenmp
endif

# MPI compiler
MPICC = mpicc

# T·∫°o th∆∞ m·ª•c build
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# Build t·∫•t c·∫£
all: $(BUILD_DIR) sequential openmp pthread mpi

# Phi√™n b·∫£n tu·∫ßn t·ª±
sequential: $(BUILD_DIR) sequential.c
	$(CC) $(CFLAGS) -o $(BUILD_DIR)/sequential sequential.c
	@echo "‚úÖ Sequential build th√†nh c√¥ng ‚Üí $(BUILD_DIR)/sequential"

# Phi√™n b·∫£n OpenMP
openmp: $(BUILD_DIR) openmp.c
	@echo "Building OpenMP version..."
	@if $(OPENMP_CC) $(CFLAGS) $(OPENMP_FLAGS) -o $(BUILD_DIR)/openmp openmp.c 2>/dev/null; then \
		echo "‚úÖ OpenMP build th√†nh c√¥ng ‚Üí $(BUILD_DIR)/openmp"; \
	else \
		echo "‚ùå OpenMP build th·∫•t b·∫°i"; \
		echo "üí° C√†i ƒë·∫∑t: brew install gcc libomp (macOS) ho·∫∑c apt install libgomp1 (Linux)"; \
		exit 1; \
	fi

# Phi√™n b·∫£n Pthread
pthread: $(BUILD_DIR) pthread.c
	$(CC) $(CFLAGS) -pthread -o $(BUILD_DIR)/pthread pthread.c
	@echo "‚úÖ Pthread build th√†nh c√¥ng ‚Üí $(BUILD_DIR)/pthread"

# Phi√™n b·∫£n MPI
mpi: $(BUILD_DIR) mpi.c
	@echo "Building MPI version..."
	@if command -v $(MPICC) >/dev/null 2>&1; then \
		$(MPICC) $(CFLAGS) -o $(BUILD_DIR)/mpi mpi.c && echo "‚úÖ MPI build th√†nh c√¥ng ‚Üí $(BUILD_DIR)/mpi"; \
	else \
		echo "‚ùå MPI compiler kh√¥ng t√¨m th·∫•y"; \
		echo "üí° C√†i ƒë·∫∑t: brew install open-mpi (macOS) ho·∫∑c apt install libopenmpi-dev (Linux)"; \
		exit 1; \
	fi

# Test nhanh - ch·ªâ test c√°c phi√™n b·∫£n build ƒë∆∞·ª£c
test-small: sequential pthread
	@echo "=== TEST SEQUENTIAL ==="
	$(BUILD_DIR)/sequential 10
	@echo "\n=== TEST PTHREAD ==="
	$(BUILD_DIR)/pthread 10 4
	@if [ -f "$(BUILD_DIR)/openmp" ]; then \
		echo "\n=== TEST OPENMP ==="; \
		$(BUILD_DIR)/openmp 10 4; \
	else \
		echo "\n‚ö†Ô∏è  OpenMP ch∆∞a build (c·∫ßn: brew install gcc libomp)"; \
	fi
	@if [ -f "$(BUILD_DIR)/mpi" ] && command -v mpirun >/dev/null 2>&1; then \
		echo "\n=== TEST MPI ==="; \
		mpirun -np 4 $(BUILD_DIR)/mpi 10; \
	else \
		echo "\n‚ö†Ô∏è  MPI ch∆∞a build (c·∫ßn: brew install open-mpi)"; \
	fi

# Test t·∫•t c·∫£ (b·ªè qua l·ªói)
test-all: 
	@$(MAKE) all || true
	@$(MAKE) test-small

# Test hi·ªáu nƒÉng
test-performance: all
	@echo "=== PERFORMANCE TEST (n=500) ==="
	@echo "Sequential:"
	@time $(BUILD_DIR)/sequential 500
	@if [ -f "$(BUILD_DIR)/openmp" ]; then \
		echo "\nOpenMP (4 threads):"; \
		time $(BUILD_DIR)/openmp 500 4; \
	fi
	@if [ -f "$(BUILD_DIR)/pthread" ]; then \
		echo "\nPthread (4 threads):"; \
		time $(BUILD_DIR)/pthread 500 4; \
	fi
	@if [ -f "$(BUILD_DIR)/mpi" ]; then \
		echo "\nMPI (4 processes):"; \
		time mpirun -np 4 $(BUILD_DIR)/mpi 500; \
	fi

# D·ªçn d·∫πp
clean:
	rm -rf $(BUILD_DIR)
	@echo "üóëÔ∏è  ƒê√£ x√≥a th∆∞ m·ª•c $(BUILD_DIR)/"

# Tr·ª£ gi√∫p
help:
	@echo "Gaussian Elimination - Parallel Computing"
	@echo ""
	@echo "Targets:"
	@echo "  all              - Build t·∫•t c·∫£ 4 phi√™n b·∫£n"
	@echo "  sequential       - Build phi√™n b·∫£n tu·∫ßn t·ª±"
	@echo "  openmp          - Build phi√™n b·∫£n OpenMP"
	@echo "  pthread         - Build phi√™n b·∫£n Pthread"
	@echo "  mpi             - Build phi√™n b·∫£n MPI"
	@echo "  test-small      - Test nhanh (10x10)"
	@echo "  test-performance - Test hi·ªáu nƒÉng (500x500)"
	@echo "  clean           - X√≥a executables"
	@echo "  help            - Hi·ªÉn th·ªã tr·ª£ gi√∫p"
	@echo ""
	@echo "Usage:"
	@echo "  $(BUILD_DIR)/sequential [n]           - Ch·∫°y tu·∫ßn t·ª±"
	@echo "  $(BUILD_DIR)/openmp [n] [threads]     - Ch·∫°y OpenMP"
	@echo "  $(BUILD_DIR)/pthread [n] [threads]    - Ch·∫°y Pthread"
	@echo "  mpirun -np [procs] $(BUILD_DIR)/mpi [n] - Ch·∫°y MPI"
	@echo ""
	@echo "File outputs:"
	@echo "  All executables ‚Üí $(BUILD_DIR)/"

.PHONY: all test-small test-performance clean help 