#!/bin/bash

# Script ch·∫°y test to√†n di·ªán cho Gaussian Elimination
# H·ªó tr·ª£ Sequential, OpenMP, Pthread, MPI

set -e  # Exit on error

echo "üöÄ GAUSSIAN ELIMINATION - COMPREHENSIVE TEST SUITE"
echo "=================================================="

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# H√†m in m√†u
print_color() {
    echo -e "${1}${2}${NC}"
}

# Ki·ªÉm tra dependencies
check_dependencies() {
    print_color $YELLOW "üìã Ki·ªÉm tra dependencies..."
    
    if ! command -v gcc &> /dev/null; then
        print_color $RED "‚ùå gcc kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        exit 1
    fi
    
    if ! command -v make &> /dev/null; then
        print_color $RED "‚ùå make kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        exit 1
    fi
    
    if command -v mpicc &> /dev/null && command -v mpirun &> /dev/null; then
        MPI_AVAILABLE=1
        print_color $GREEN "‚úÖ MPI available"
    else
        MPI_AVAILABLE=0
        print_color $YELLOW "‚ö†Ô∏è  MPI kh√¥ng c√≥ s·∫µn, b·ªè qua test MPI"
    fi
    
    print_color $GREEN "‚úÖ Dependencies OK"
}

# Build t·∫•t c·∫£
build_all() {
    print_color $YELLOW "üî® Building t·∫•t c·∫£ phi√™n b·∫£n..."
    
    if make clean && make all; then
        print_color $GREEN "‚úÖ Build th√†nh c√¥ng!"
    else
        print_color $RED "‚ùå Build th·∫•t b·∫°i!"
        exit 1
    fi
}

# Test c∆° b·∫£n v·ªõi ma tr·∫≠n nh·ªè
test_basic() {
    print_color $BLUE "\nüß™ TEST C∆† B·∫¢N (ma tr·∫≠n 10x10)"
    echo "========================================"
    
    # Test Sequential
    print_color $YELLOW "Testing Sequential..."
    if ./build/sequential 10; then
        print_color $GREEN "‚úÖ Sequential: PASS"
    else
        print_color $RED "‚ùå Sequential: FAIL"
    fi
    
    echo ""
    
    # Test OpenMP
    print_color $YELLOW "Testing OpenMP..."
    if ./build/openmp_version 10 4; then
        print_color $GREEN "‚úÖ OpenMP: PASS"
    else
        print_color $RED "‚ùå OpenMP: FAIL"
    fi
    
    echo ""
    
    # Test Pthread
    print_color $YELLOW "Testing Pthread..."
    if ./build/pthread_version 10 4; then
        print_color $GREEN "‚úÖ Pthread: PASS"
    else
        print_color $RED "‚ùå Pthread: FAIL"
    fi
    
    echo ""
    
    # Test MPI n·∫øu c√≥
    if [ $MPI_AVAILABLE -eq 1 ]; then
        print_color $YELLOW "Testing MPI..."
        if mpirun -np 4 ./build/mpi_version 10; then
            print_color $GREEN "‚úÖ MPI: PASS"
        else
            print_color $RED "‚ùå MPI: FAIL"
        fi
    fi
}

# Test hi·ªáu nƒÉng v·ªõi c√°c k√≠ch th∆∞·ªõc kh√°c nhau
test_performance() {
    print_color $BLUE "\n‚ö° TEST HI·ªÜU NƒÇNG"
    echo "========================================"
    
    # C√°c k√≠ch th∆∞·ªõc test
    sizes=(100 200 500)
    
    for size in "${sizes[@]}"; do
        print_color $YELLOW "Testing v·ªõi ma tr·∫≠n ${size}x${size}..."
        
        echo "üìä Performance comparison for n=$size"
        echo "----------------------------------------"
        
        # Sequential baseline
        print_color $YELLOW "Sequential (baseline)..."
        seq_time=$(./build/sequential $size | grep "Th·ªùi gian th·ª±c hi·ªán" | awk '{print $4}')
        echo "Sequential: ${seq_time} gi√¢y"
        
        # Test OpenMP v·ªõi s·ªë lu·ªìng kh√°c nhau
        for threads in 2 4 8; do
            print_color $YELLOW "OpenMP v·ªõi $threads lu·ªìng..."
            omp_time=$(./build/openmp_version $size $threads | grep "Th·ªùi gian th·ª±c hi·ªán" | awk '{print $4}')
            if [ ! -z "$seq_time" ] && [ ! -z "$omp_time" ]; then
                speedup=$(echo "scale=2; $seq_time / $omp_time" | bc -l 2>/dev/null || echo "N/A")
                echo "OpenMP ($threads threads): ${omp_time} gi√¢y (Speedup: ${speedup}x)"
            fi
        done
        
        # Test Pthread v·ªõi s·ªë lu·ªìng kh√°c nhau
        for threads in 2 4 8; do
            print_color $YELLOW "Pthread v·ªõi $threads lu·ªìng..."
            pthread_time=$(./build/pthread_version $size $threads | grep "Th·ªùi gian th·ª±c hi·ªán" | awk '{print $4}')
            if [ ! -z "$seq_time" ] && [ ! -z "$pthread_time" ]; then
                speedup=$(echo "scale=2; $seq_time / $pthread_time" | bc -l 2>/dev/null || echo "N/A")
                echo "Pthread ($threads threads): ${pthread_time} gi√¢y (Speedup: ${speedup}x)"
            fi
        done
        
        echo ""
    done
}

# Test t√≠nh ƒë√∫ng ƒë·∫Øn v·ªõi ma tr·∫≠n l·ªõn
test_correctness() {
    print_color $BLUE "\nüéØ TEST T√çNH ƒê√öNG ƒê·∫ÆN"
    echo "========================================"
    
    size=100
    print_color $YELLOW "Ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn v·ªõi ma tr·∫≠n ${size}x${size}..."
    
    # T·∫°o file t·∫°m ƒë·ªÉ l∆∞u nghi·ªám
    seq_result=$(mktemp)
    omp_result=$(mktemp)
    pthread_result=$(mktemp)
    
    # Ch·∫°y c√°c phi√™n b·∫£n v√† l∆∞u nghi·ªám
    ./build/sequential $size > $seq_result 2>&1
    ./build/openmp_version $size 4 > $omp_result 2>&1
    ./build/pthread_version $size 4 > $pthread_result 2>&1
    
    # Ki·ªÉm tra xem t·∫•t c·∫£ c√≥ th√†nh c√¥ng kh√¥ng
    if grep -q "Nghi·ªám ch√≠nh x√°c" $seq_result && \
       grep -q "Nghi·ªám ch√≠nh x√°c" $omp_result && \
       grep -q "Nghi·ªám ch√≠nh x√°c" $pthread_result; then
        print_color $GREEN "‚úÖ T·∫•t c·∫£ phi√™n b·∫£n cho nghi·ªám ch√≠nh x√°c!"
    else
        print_color $RED "‚ùå C√≥ phi√™n b·∫£n cho nghi·ªám kh√¥ng ch√≠nh x√°c!"
    fi
    
    # D·ªçn d·∫πp
    rm -f $seq_result $omp_result $pthread_result
}

# Test stress v·ªõi ma tr·∫≠n l·ªõn
test_stress() {
    print_color $BLUE "\nüí™ STRESS TEST"
    echo "========================================"
    
    size=1000
    print_color $YELLOW "Stress test v·ªõi ma tr·∫≠n ${size}x${size}..."
    
    # Test Sequential
    print_color $YELLOW "Sequential stress test..."
    if timeout 60 ./build/sequential $size > /dev/null; then
        print_color $GREEN "‚úÖ Sequential stress test: PASS"
    else
        print_color $RED "‚ùå Sequential stress test: FAIL (timeout ho·∫∑c l·ªói)"
    fi
    
    # Test OpenMP
    print_color $YELLOW "OpenMP stress test..."
    if timeout 30 ./build/openmp_version $size 8 > /dev/null; then
        print_color $GREEN "‚úÖ OpenMP stress test: PASS"
    else
        print_color $RED "‚ùå OpenMP stress test: FAIL (timeout ho·∫∑c l·ªói)"
    fi
    
    # Test Pthread
    print_color $YELLOW "Pthread stress test..."
    if timeout 30 ./build/pthread_version $size 8 > /dev/null; then
        print_color $GREEN "‚úÖ Pthread stress test: PASS"
    else
        print_color $RED "‚ùå Pthread stress test: FAIL (timeout ho·∫∑c l·ªói)"
    fi
}

# Ch·∫°y comprehensive performance test
test_comprehensive_performance() {
    print_color $BLUE "\nüìà COMPREHENSIVE PERFORMANCE TEST"
    echo "========================================"
    
    if [ -f "./build/performance_test" ]; then
        print_color $YELLOW "Ch·∫°y comprehensive performance test..."
        ./build/performance_test 300
        
        if [ -f "performance_results.csv" ]; then
            print_color $GREEN "‚úÖ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong performance_results.csv"
        fi
    else
        print_color $RED "‚ùå Performance test binary kh√¥ng t·ªìn t·∫°i!"
    fi
}

# Main function
main() {
    # Parse arguments
    RUN_BASIC=1
    RUN_PERFORMANCE=1
    RUN_CORRECTNESS=1
    RUN_STRESS=0
    RUN_COMPREHENSIVE=1
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --basic-only)
                RUN_PERFORMANCE=0
                RUN_CORRECTNESS=0
                RUN_COMPREHENSIVE=0
                shift
                ;;
            --performance-only)
                RUN_BASIC=0
                RUN_CORRECTNESS=0
                RUN_COMPREHENSIVE=0
                shift
                ;;
            --with-stress)
                RUN_STRESS=1
                shift
                ;;
            --help)
                echo "Usage: $0 [options]"
                echo "Options:"
                echo "  --basic-only      Ch·ªâ ch·∫°y test c∆° b·∫£n"
                echo "  --performance-only Ch·ªâ ch·∫°y test hi·ªáu nƒÉng"
                echo "  --with-stress     Bao g·ªìm stress test"
                echo "  --help            Hi·ªÉn th·ªã tr·ª£ gi√∫p"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Ch·∫°y c√°c test
    check_dependencies
    build_all
    
    if [ $RUN_BASIC -eq 1 ]; then
        test_basic
    fi
    
    if [ $RUN_CORRECTNESS -eq 1 ]; then
        test_correctness
    fi
    
    if [ $RUN_PERFORMANCE -eq 1 ]; then
        test_performance
    fi
    
    if [ $RUN_STRESS -eq 1 ]; then
        test_stress
    fi
    
    if [ $RUN_COMPREHENSIVE -eq 1 ]; then
        test_comprehensive_performance
    fi
    
    print_color $GREEN "\nüéâ T·∫§T C·∫¢ TEST ƒê√É HO√ÄN TH√ÄNH!"
    echo ""
    echo "üìã T√≥m t·∫Øt:"
    echo "   - Sequential: Gaussian Elimination tu·∫ßn t·ª±"
    echo "   - OpenMP: Song song h√≥a v·ªõi shared memory"
    echo "   - Pthread: Song song h√≥a v·ªõi manual thread management"
    echo "   - MPI: Song song h√≥a v·ªõi distributed memory"
    echo ""
    echo "üìä K·∫øt qu·∫£ chi ti·∫øt c√≥ th·ªÉ xem trong performance_results.csv"
}

# Ch·∫°y script
main "$@" 